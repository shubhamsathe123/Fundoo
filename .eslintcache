[{"C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\index.js":"1","C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\App.js":"2","C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\reportWebVitals.js":"3","C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\Components\\RegistrationPage\\register.jsx":"4","C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\Components\\LoginPage\\login.jsx":"5"},{"size":504,"mtime":1611026083703,"results":"6","hashOfConfig":"7"},{"size":298,"mtime":1611302803502,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":10092,"mtime":1611237803653,"results":"10","hashOfConfig":"7"},{"size":5988,"mtime":1611371747125,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"jw120l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\index.js",[],["24","25"],"C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\App.js",[],"C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\reportWebVitals.js",[],"C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\Components\\RegistrationPage\\register.jsx",["26","27"],"import React  from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport logo from '../../Images/account.svg';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n// import ReactDOM, { render } from 'react-dom';\r\nimport '../RegistrationPage/register.css'\r\n// import { FormHelperText, Grid } from '@material-ui/core';\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(5),\r\n      width: '25ch',\r\n    },\r\n  },\r\n}));\r\n\r\nexport default class RegisterForm extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      Rpassword: \"\",\r\n      errorValid: {\r\n        firstName: false,\r\n        lastName: false,\r\n        email: false,\r\n        password: false,\r\n        Rpassword: false,\r\n        showPassword : false,\r\n      }, \r\n      errors: {\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        Rpassword: \"\",\r\n      },\r\n    };\r\n  }\r\n\r\n  handleFirstNameInput = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      firstName: event.target.value,\r\n    });\r\n    let errors = this.state.errors;\r\n    let validate = false;\r\n    const regexvalidatefirstName = new RegExp(/^[A-Z]{1}[a-z]{3,}$/);\r\n    if (!regexvalidatefirstName.test(this.state.firstName)) {\r\n      errors.firstName = \"First Name is incorrect\";\r\n      validate = true;\r\n    } else {\r\n      errors.firstName = \"\";\r\n    }\r\n    this.setState({\r\n      errorValid: { firstName: validate },\r\n      errors: { firstName: errors.firstName },\r\n    });\r\n  };\r\n  \r\n  handleLastNameInput = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      lastName: event.target.value,\r\n    });\r\n    let errors = this.state.errors;\r\n    let validate = false;\r\n    \r\n    const regexvalidatelastName = new RegExp(/^[A-Z]{1}[a-z]{3,}$/);\r\n    if (!regexvalidatelastName.test(event.target.value)) {\r\n      errors.lastName = \"Last Name is incorrect\";\r\n      validate = true;\r\n    } else {\r\n      errors.lastName = \"\";\r\n    }\r\n    this.setState({\r\n      errorValid: { lastName: validate },\r\n      errors: { lastName: errors.lastName },\r\n    });\r\n  };\r\n\r\n   \r\n\r\n  handleEmailInput = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      email: event.target.value,\r\n    });\r\n    let errors = this.state.errors;\r\n    let validate = false;\r\n    const regexValidateEmail = new RegExp(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$$/);\r\n    if (!regexValidateEmail.test(event.target.value)) {\r\n      errors.email = \"Email is not according to the syntx\";\r\n      validate = true;\r\n    } else {\r\n      errors.email = \"\";\r\n    }\r\n    this.setState({\r\n      errorValid: { email: validate },\r\n      errors: { email: errors.email },\r\n    });\r\n  };\r\n\r\n  handlePasswordInput = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      hidePassword: true,\r\n      password: event.target.value,\r\n      icEye: 'visibility-off',\r\n    });\r\n    let errors = this.state.errors;\r\n    let validate = false;\r\n    const regexvalidatePassword = new RegExp(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/);\r\n    if (!regexvalidatePassword.test(event.target.value)) {\r\n      errors.password =\r\n        \"Password is not valid\";\r\n      validate = true;\r\n    } else {\r\n      errors.password = \"\";\r\n    }\r\n    this.setState({\r\n      errorValid: { password: validate },\r\n      errors: { password: errors.password },\r\n    });\r\n  };\r\n  \r\n  \r\n  handleReapetPasswordInput = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      hidePassword: true,\r\n      Rpassword: event.target.value,\r\n      icEye: 'visibility-off',\r\n    });\r\n    let errors = this.state.errors;\r\n    let validate = false;\r\n    if (this.state.password !== this.state.Rpassword) {\r\n\r\n      errors.Rpassword =\r\n        \"\";\r\n      validate = true;\r\n\r\n    } else if (this.state.password === this.state.Rpassword) {\r\n      errors.Rpassword = true;\r\n    }\r\n    this.setState({\r\n\r\n      errorValid: { Rpassword: validate },\r\n      errors: { Rpassword: errors.Rpassword },\r\n    });\r\n   \r\n  };\r\n\r\n   handleSubmit = () => {\r\n\r\n         if (\r\n           this.state.email === \"\" &&\r\n           this.state.password === \"\" &&\r\n           this.state.firstName === \"\" &&\r\n           this.state.lastName === \"\" &&\r\n           this.state.Rpassword === \"\"\r\n         ) {\r\n           this.setState({\r\n             errorValid: {\r\n               email: true,\r\n               password: true,\r\n               firstName: true,\r\n               lastName: true,\r\n               Rpassword: true\r\n             },\r\n             errors: {\r\n               email: \"email field shoul not be empty\",\r\n               password: \"password field should not be empty\",\r\n               firstName: \"firstname field should not be empty\",\r\n               lastName: \"lastname field should not be empty\",\r\n               Rpassword: \"password field should not be empty\"\r\n             },\r\n           });\r\n         }\r\n    \r\n        }   \r\nrender() {\r\n    return (\r\n      <div className=\"main\" >\r\n         <div className=\"left-container\">\r\n          <div className=\"title\">\r\n                 <Typography component=\"h1\" variant=\"h5\" className=\"fundooShift\">\r\n                     <span style={{ color: \"#0606f8\"}}><b>F</b></span>\r\n                     <span style={{ color: \"#d10303\" }}><b>u</b></span>\r\n                     <span style={{ color: \"#f0b000\" }}><b>n</b></span>\r\n                     <span style={{ color: \"#0606f8\" }}><b>d</b></span>\r\n                     <span style={{ color: \"green\" }}><b>o</b></span>\r\n                    <span style={{ color: \"#d10303\" }}><b>o</b></span>\r\n                </Typography>\r\n         </div>\r\n         <div className=\"header\"><h1> Create your Fundoo Account</h1></div>\r\n\r\n         <div className={useStyles.root} noValidate autoComplete=\"off\">\r\n             <div className=\"parent\">\r\n                 <div className=\"name\">\r\n                    <TextField \r\n                     size=\"small\"  \r\n                      id=\"outlined-basic\"\r\n                      label=\"First Name\" \r\n                      variant=\"outlined\" \r\n                       name = \"firstName\"\r\n                       required\r\n                       value={this.state.firstName}\r\n                      error={this.state.errorValid.firstName}\r\n                      onChange={this.handleFirstNameInput}\r\n                      helperText={this.state.errors[\"firstName\"]}\r\n                         />\r\n                  </div> \r\n                 <div className=\"laname\">\r\n                    <TextField size=\"small\"  \r\n                    id=\"outlined-basic\" \r\n                    label=\"Last Name\" \r\n                    variant=\"outlined\" \r\n                    name = \"lastName\" \r\n                    value={this.state.lastName}\r\n                    error={this.state.errorValid.lastName}\r\n                   onChange={this.handleLastNameInput}\r\n                   helperText={this.state.errors[\"lastName\"]}\r\n                      />\r\n                 </div>\r\n                \r\n             </div>\r\n            <div className=\"email\">\r\n                  <TextField size=\"small\"  \r\n                  id=\"outlined-basic\" \r\n                  style ={{width: '140%'}} \r\n                  label=\"Username\" \r\n                  variant=\"outlined\" \r\n                  width=\"500px\" \r\n                    name=\"email\"\r\n                    value={this.state.email}\r\n                    error={this.state.errorValid.email}\r\n                    onChange={this.handleEmailInput}\r\n                    helperText={this.state.errors[\"email\"]}\r\n                     />\r\n                  <p><span  class=\"spanid\">You can use letters, numbers and symbols</span></p>\r\n            </div>\r\n            <div className=\"emp\"> \r\n               <div className=\"name\">       \r\n                <TextField  size=\"small\"  \r\n                id=\"outlined-basic\" \r\n                label=\"password\" \r\n                variant=\"outlined\"  \r\n                 name=\"password\"\r\n                 autoComplete=\"current-password\"\r\n                 value={this.state.password}\r\n                error={this.state.errorValid.password}\r\n                onChange={this.handlePasswordInput}\r\n                helperText={this.state.errors[\"password\"]}\r\n                type={this.state.showPassword ? 'text' : 'password'}\r\n                 />\r\n                </div> \r\n                 <TextField size=\"small\" \r\n                 id=\"outlined-basic\" \r\n                 label=\"confirm\" \r\n                 variant=\"outlined\"\r\n                 name=\"rpassword\"\r\n                 error={this.state.errorValid.Rpassword}\r\n                onChange={this.handleReapetPasswordInput}\r\n               helperText={this.state.errors[\"Rpassword\"]}\r\n               type=\"text\"\r\n              // type={this.state.showPassword ? 'text' : 'password'}\r\n                  />     \r\n            </div>\r\n          <div>\r\n             <p><span class=\"spanid\">Use 8 or more characters with a mix of letters, numbers & symbols</span></p>\r\n          </div>\r\n          <div className=\"chkbox\">\r\n          <Checkbox\r\n            defaultChecked\r\n           color=\"primary\"\r\n            inputProps={{ 'aria-label': 'secondary checkbox' }}\r\n         />\r\n          <p>show password</p>\r\n          </div>\r\n              <Button className=\"button1\" \r\n              variant=\"contained\" \r\n              color=\"primary\"\r\n              onClick={this.handleSubmit}\r\n              >  Next </Button>\r\n              <Button className=\"button2\" color=\"primary\">Sign in instead</Button>\r\n        </div>\r\n      </div>\r\n\r\n         <div className=\"right-container\">\r\n            <img src={logo} style={{ height: 256 }} alt=\"Signup logo\" />\r\n            \r\n           <p> One account. All of Google  working <br/> for you.</p> \r\n         </div>\r\n    </div>\r\n     \r\n      \r\n    \r\n    ) ;   \r\n}\r\n\r\n}\r\n\r\n","C:\\Users\\lenovo\\OneDrive\\Desktop\\ReactJs\\fundoo\\src\\Components\\LoginPage\\login.jsx",["28","29","30","31"],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":97,"column":50,"nodeType":"38","messageId":"39","endLine":97,"endColumn":51,"suggestions":"40"},{"ruleId":"36","severity":1,"message":"37","line":97,"column":66,"nodeType":"38","messageId":"39","endLine":97,"endColumn":67,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":44,"column":33,"nodeType":"44","messageId":"45","endLine":44,"endColumn":35},{"ruleId":"42","severity":1,"message":"43","line":54,"column":36,"nodeType":"44","messageId":"45","endLine":54,"endColumn":38},{"ruleId":"46","severity":1,"message":"47","line":187,"column":52,"nodeType":"48","endLine":187,"endColumn":59},{"ruleId":"46","severity":1,"message":"47","line":187,"column":120,"nodeType":"48","endLine":187,"endColumn":143},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["51","52"],["53","54"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"messageId":"55","fix":"56","desc":"57"},{"messageId":"58","fix":"59","desc":"60"},{"messageId":"55","fix":"61","desc":"57"},{"messageId":"58","fix":"62","desc":"60"},"removeEscape",{"range":"63","text":"64"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"65","text":"66"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"67","text":"64"},{"range":"68","text":"66"},[2647,2648],"",[2647,2647],"\\",[2663,2664],[2663,2663]]